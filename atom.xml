<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>scars</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-05-29T02:03:32.140Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>scars</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据库散碎知识</title>
    <link href="http://example.com/2024/05/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%A3%E7%A2%8E%E7%9F%A5%E8%AF%86/"/>
    <id>http://example.com/2024/05/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%A3%E7%A2%8E%E7%9F%A5%E8%AF%86/</id>
    <published>2024-05-29T08:46:54.000Z</published>
    <updated>2024-05-29T02:03:32.140Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、描述一下数据库事务隔离级别？"><a href="#1、描述一下数据库事务隔离级别？" class="headerlink" title="1、描述一下数据库事务隔离级别？"></a>1、描述一下数据库事务隔离级别？</h1><h2 id="ACID："><a href="#ACID：" class="headerlink" title="ACID："></a>ACID：</h2><ol><li>原子性：undo log（MVCC）</li><li>一致性: 最核心和最本质的要求</li><li>隔离性:锁，mvcc（多版本并发控制）</li><li>持久性：redo log</li></ol><p>数据库的事务隔离级别有四种，分别是读未提交、读已提交、可重复读、序列化，不同的隔离级别下会产生脏读、幻读、不可重复读等相关问题，因此在选择隔离级别的时候要根据应用场景来决定，使用合适的隔离级别。</p><p>​ 各种隔离级别和数据库异常情况对应情况如下：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复  读</th><th>幻读</th></tr></thead><tbody><tr><td>READ- UNCOMMITTED</td><td>√</td><td>√</td><td>√</td></tr><tr><td>READ-COMMITTED</td><td>×</td><td>√</td><td>√</td></tr><tr><td>REPEATABLE- READ</td><td>×</td><td>×</td><td>√</td></tr><tr><td>SERIALIZABLE</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><p>SQL 标准定义了四个隔离级别：</p><ul><li>READ-UNCOMMITTED(读取未提交)： 事务的修改，即使没有提交，对其他事务也都是可见的。事务能够读取未提交的数据，这种情况称为脏读。</li><li>READ-COMMITTED(读取已提交)： 事务读取已提交的数据，大多数数据库的默认隔离级别。当一个事务在执行过程中，数据被另外一个事务修改，造成本次事务前后读取的信息不一样，这种情况称为不可重复读。</li><li>REPEATABLE-READ(可重复读)：<br>这个级别是MySQL的默认隔离级别，它解决了脏读的问题，同时也保证了同一个事务多次读取同样的记录是一致的，但这个级别还是会出现幻读的情况。幻读是指当一个事务A读取某一个范围的数据时，另一个事务B在这个范围插入行，A事务再次读取这个范围的数据时，会产生幻读</li><li>SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。</li></ul><p>事务隔离机制的实现基于锁机制和并发调度。其中并发调度使用的是MVVC（多版本并发控制），通过保存修改的旧版本信息来支持并发一致性读和回滚等特性。</p><p>因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是READ-COMMITTED(读取提交内容):，但是你要知道的是InnoDB<br>存储引擎默认使用 <strong>REPEATABLE-READ（可重读）</strong>并不会有任何性能损失。</p><h1 id="2、MVCC的实现原理"><a href="#2、MVCC的实现原理" class="headerlink" title="2、MVCC的实现原理"></a>2、MVCC的实现原理</h1><p>详见mvcc文档</p><h1 id="3、mysql幻读怎么解决的"><a href="#3、mysql幻读怎么解决的" class="headerlink" title="3、mysql幻读怎么解决的"></a>3、mysql幻读怎么解决的</h1><p>​ 事务A按照一定条件进行数据读取，期间事务B插入了相同搜索条件的新数据，事务A再次按照原先条件进行读取时，发现了事务B新插入的数据称之为幻读。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">20</span>),(<span class="number">5</span>,<span class="string">&#x27;5&#x27;</span>,<span class="number">20</span>),(<span class="number">15</span>,<span class="string">&#x27;15&#x27;</span>,<span class="number">30</span>),(<span class="number">20</span>,<span class="string">&#x27;20&#x27;</span>,<span class="number">30</span>);</span><br></pre></td></tr></table></figure><p>假设有如下业务场景：</p><table><thead><tr><th>时间</th><th>事务1</th><th>事务2</th></tr></thead><tbody><tr><td></td><td>begin；</td><td></td></tr><tr><td>T1</td><td>select * from user where age &#x3D; 20;2个结果</td><td></td></tr><tr><td>T2</td><td></td><td>insert into user values(25,’25’,20);commit;</td></tr><tr><td>T3</td><td>select * from user where age &#x3D;20;2个结果</td><td></td></tr><tr><td>T4</td><td>update user set name&#x3D;’00’ where age &#x3D;20;此时看到影响的行数为3</td><td></td></tr><tr><td>T5</td><td>select * from user where age &#x3D;20;三个结果</td><td></td></tr></tbody></table><p>执行流程如下：</p><p>1、T1时刻读取年龄为20 的数据，事务1拿到了2条记录</p><p>2、T2时刻另一个事务插入一条新的记录，年龄也是20</p><p>3、T3时刻，事务1再次读取年龄为20的数据，发现还是2条记录，事务2插入的数据并没有影响到事务1的事务读取</p><p>4、T4时刻，事务1修改年龄为20的数据，发现结果变成了三条，修改了三条数据</p><p>5、T5时刻，事务1再次读取年龄为20的数据，发现结果有三条，第三条数据就是事务2插入的数据，此时就产生了幻读情况</p><p>此时大家需要思考一个问题，在当下场景里，为什么没有解决幻读问题？</p><p>其实通过前面的分析，大家应该知道了快照读和当前读，一般情况下select * from ….where …是快照读，不会加锁，而 for<br>update,lock in share mode,update,delete都属于当前读，**如果事务中都是用快照读，那么不会产生幻读的问题，但是快照读和当前读一起使用的时候就会产生幻读<br>**。</p><p>如果都是当前读的话，如何解决幻读问题呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">20</span>),(<span class="number">5</span>,<span class="string">&#x27;5&#x27;</span>,<span class="number">20</span>),(<span class="number">15</span>,<span class="string">&#x27;15&#x27;</span>,<span class="number">30</span>),(<span class="number">20</span>,<span class="string">&#x27;20&#x27;</span>,<span class="number">30</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th>时间</th><th>事务1</th><th>事务2</th></tr></thead><tbody><tr><td></td><td>begin;</td><td></td></tr><tr><td>T1</td><td>select * from user where age &#x3D;20 for update;</td><td></td></tr><tr><td>T2</td><td></td><td>insert into user values(25,’25’,20);此时会阻塞等待锁</td></tr><tr><td>T3</td><td>select * from user where age &#x3D;20 for update;</td><td></td></tr></tbody></table><p>此时，可以看到事务2被阻塞了，需要等待事务1提交事务之后才能完成，其实本质上来说采用的是间隙锁的机制解决幻读问题。</p><h1 id="4、sql-join原理"><a href="#4、sql-join原理" class="headerlink" title="4、sql join原理?"></a>4、sql join原理?</h1><p>​ MySQL是只支持一种Join算法Nested-Loop Join(嵌套循环连接)，并不支持哈希连接和合并连接，不过在mysql中包含了多种变种，能够帮助MySQL提高join执行的效率。</p><p>​        <strong>1、Simple Nested-Loop Join</strong></p><p>​ 这个算法相对来说就是很简单了，从驱动表中取出R1匹配S表所有列，然后R2，R3,直到将R表中的所有数据匹配完，然后合并数据，可以看到这种算法要对S表进行RN次访问，虽然简单，但是相对来说开销还是太大了。</p><p>​        <strong>2、Index Nested-Loop Join</strong></p><p>​ 索引嵌套联系由于非驱动表上有索引，所以比较的时候不再需要一条条记录进行比较，而可以通过索引来减少比较，从而加速查询。这也就是平时我们在做关联查询的时候必须要求关联字段有索引的一个主要原因。</p><p>​<br>这种算法在链接查询的时候，驱动表会根据关联字段的索引进行查找，当在索引上找到了符合的值，再回表进行查询，也就是只有当匹配到索引以后才会进行回表。至于驱动表的选择，MySQL优化器一般情况下是会选择记录数少的作为驱动表，但是当SQL特别复杂的时候不排除会出现错误选择。</p><p>​<br>在索引嵌套链接的方式下，如果非驱动表的关联键是主键的话，这样来说性能就会非常的高，如果不是主键的话，关联起来如果返回的行数很多的话，效率就会特别的低，因为要多次的回表操作。先关联索引，然后根据二级索引的主键ID进行回表的操作。这样来说的话性能相对就会很差。</p><p>​        <strong>3、Block Nested-Loop Join</strong></p><p>​ 在有索引的情况下，MySQL会尝试去使用Index Nested-Loop Join算法，在有些情况下，可能Join的列就是没有索引，那么这时MySQL的选择绝对不会是最先介绍的Simple<br>Nested-Loop Join算法，而是会优先使用Block Nested-Loop Join的算法。</p><p>​ Block Nested-Loop Join对比Simple Nested-Loop Join多了一个中间处理的过程，也就是join buffer，使用join<br>buffer将驱动表的查询JOIN相关列都给缓冲到了JOIN<br>BUFFER当中，然后批量与非驱动表进行比较，这也来实现的话，可以将多次比较合并到一次，降低了非驱动表的访问频率。也就是只需要访问一次S表。这样来说的话，就不会出现多次访问非驱动表的情况了，也只有这种情况下才会访问join<br>buffer。</p><p>​ 在MySQL当中，我们可以通过参数join_buffer_size来设置join<br>buffer的值，然后再进行操作。默认情况下join_buffer_size&#x3D;256K，在查找的时候MySQL会将所有的需要的列缓存到join<br>buffer当中，包括select的列，而不是仅仅只缓存关联列。在一个有N个JOIN关联的SQL当中会在执行时候分配N-1个join buffer。</p><h1 id="5、说明一下数据库索引原理、底层索引数据结构，叶子节点存储的是什么，索引失效的情况？"><a href="#5、说明一下数据库索引原理、底层索引数据结构，叶子节点存储的是什么，索引失效的情况？" class="headerlink" title="5、说明一下数据库索引原理、底层索引数据结构，叶子节点存储的是什么，索引失效的情况？"></a>5、说明一下数据库索引原理、底层索引数据结构，叶子节点存储的是什么，索引失效的情况？</h1><p>​ 索引的实现原理，底层数据结构，叶子节点存储数据需要看视频了解。</p><p>​ 索引失效的情况：</p><p>​ 1、组合索引不遵循最左匹配原则</p><p>​ 2、组合索引的前面索引列使用范围查询(&lt;,&gt;,like),会导致后续的索引失效</p><p>​ 3、不要在索引上做任何操作（计算，函数，类型转换）</p><p>​ 4、is null和is not null无法使用索引</p><p>​ 5、尽量少使用or操作符，否则连接时索引会失效</p><p>​ 6、字符串不添加引号会导致索引失效</p><p>​ 7、两表关联使用的条件字段中字段的长度、编码不一致会导致索引失效</p><p>​ 8、like语句中，以%开头的模糊查询</p><p>​ 9、如果mysql中使用全表扫描比使用索引快，也会导致索引失效</p><h1 id="6、mysql如何做分库分表的？"><a href="#6、mysql如何做分库分表的？" class="headerlink" title="6、mysql如何做分库分表的？"></a>6、mysql如何做分库分表的？</h1><p>​ 使用mycat或者shardingsphere中间件做分库分表，选择合适的中间件，水平分库，水平分表，垂直分库，垂直分表</p><p>​ 在进行分库分表的时候要尽量遵循以下原则：</p><p>​ 1、能不切分尽量不要切分；</p><p>​ 2、如果要切分一定要选择合适的切分规则，提前规划好；</p><p>​ 3、数据切分尽量通过数据冗余或表分组来降低跨库 Join 的可能；</p><p>​ 4、由于数据库中间件对数据 Join 实现的优劣难以把握，而且实现高性能难度极大，业务读取尽量少使用多表 Join。</p><h1 id="7、数据存储引擎有哪些？"><a href="#7、数据存储引擎有哪些？" class="headerlink" title="7、数据存储引擎有哪些？"></a>7、数据存储引擎有哪些？</h1><p>​ 大家可以通过show engines的方式查看对应的数据库支持的存储引擎。</p><h1 id="8、描述一下InnoDB和MyISAM的区别？"><a href="#8、描述一下InnoDB和MyISAM的区别？" class="headerlink" title="8、描述一下InnoDB和MyISAM的区别？"></a>8、描述一下InnoDB和MyISAM的区别？</h1><table><thead><tr><th>区别</th><th>Innodb</th><th>MyISAM</th></tr></thead><tbody><tr><td>事务</td><td>支持</td><td>不支持</td></tr><tr><td>外键</td><td>支持</td><td>不支持</td></tr><tr><td>索引</td><td>即支持聚簇索引又支持非聚簇索引</td><td>只支持非聚簇索引</td></tr><tr><td>行锁</td><td>支持</td><td>不支持</td></tr><tr><td>表锁</td><td>支持</td><td>支持</td></tr><tr><td>存储文件</td><td>frm，ibd</td><td>frm,myi,myd</td></tr><tr><td>具体行数</td><td>每次必须要全表扫描统计行数</td><td>通过变量保存行数</td></tr></tbody></table><p>如何选择？</p><p>​ 1、是否需要支持事务，如果需要选择innodb，如果不需要选择myisam</p><p>​ 2、如果表的大部分请求都是读请求，可以考虑myisam，如果既有读也有写，使用innodb</p><p>​ 现在mysql的默认存储引擎已经变成了Innodb,推荐使用innodb</p><h1 id="9、描述一下聚簇索引和非聚簇索引的区别？"><a href="#9、描述一下聚簇索引和非聚簇索引的区别？" class="headerlink" title="9、描述一下聚簇索引和非聚簇索引的区别？"></a>9、描述一下聚簇索引和非聚簇索引的区别？</h1><p>​<br>innodb存储引擎在进行数据插入的时候必须要绑定到一个索引列上，默认是主键，如果没有主键，会选择唯一键，如果没有唯一键，那么会选择生成6字节的rowid，跟数据绑定在一起的索引我们称之为聚簇索引，没有跟数据绑定在一起的索引我们称之为非聚簇索引。</p><p>​ innodb存储引擎中既有聚簇索引也有费聚簇索引，而myisam存储引擎中只有非聚簇索引。</p><h1 id="10、事务有哪些隔离级别，分别解决了什么问题？"><a href="#10、事务有哪些隔离级别，分别解决了什么问题？" class="headerlink" title="10、事务有哪些隔离级别，分别解决了什么问题？"></a>10、事务有哪些隔离级别，分别解决了什么问题？</h1><p>​ 参考问题1</p><h1 id="11、MySQL为什么选择B-树作为它的存储结构，为什么不选择Hash、二叉、红黑树？"><a href="#11、MySQL为什么选择B-树作为它的存储结构，为什么不选择Hash、二叉、红黑树？" class="headerlink" title="11、MySQL为什么选择B+树作为它的存储结构，为什么不选择Hash、二叉、红黑树？"></a>11、MySQL为什么选择B+树作为它的存储结构，为什么不选择Hash、二叉、红黑树？</h1><p>​ 参考问题5</p><h1 id="12、描述一下mysql的乐观锁和悲观锁，锁的种类？"><a href="#12、描述一下mysql的乐观锁和悲观锁，锁的种类？" class="headerlink" title="12、描述一下mysql的乐观锁和悲观锁，锁的种类？"></a>12、描述一下mysql的乐观锁和悲观锁，锁的种类？</h1><p>​ 乐观锁并不是数据库自带的，如果需要使用乐观锁，那么需要自己去实现，一般情况下，我们会在表中新增一个version字段，每次更新数据version+1,在进行提交之前会判断version是否一致。</p><p>​ mysql中的绝大部分锁都是悲观锁，按照粒度可以分为行锁和表锁：</p><p>​        <strong>行锁：</strong></p><p>​ 共享锁：当读取一行记录的时候，为了防止别人修改，则需要添加S锁</p><p>​ 排它锁：当修改一行记录的时候，为了防止别人同时进行修改，则需要添加X锁</p><table><thead><tr><th align="center"></th><th align="center">X</th><th align="center">S</th></tr></thead><tbody><tr><td align="center">X</td><td align="center">不兼容</td><td align="center">不兼容</td></tr><tr><td align="center">S</td><td align="center">不兼容</td><td align="center">兼容</td></tr></tbody></table><p>​ 记录锁：添加在行索引上的锁</p><p>​ 间隙锁：锁定范围是索引记录之间的间隙，针对可重复读以上隔离级别</p><p>​ 临键锁：记录锁+间隙锁</p><p>​        <strong>表锁：</strong></p><p>​ 意向锁：在获取某行的锁之前，必须要获取表的锁，分为意向共享锁，意向排它锁</p><p>​ 自增锁：对自增字段所采用的特殊表级锁</p><p>​ 锁模式的含义：</p><p>​ IX：意向排它锁</p><p>​ X：锁定记录本身和记录之前的间隙</p><p>​ S：锁定记录本身和记录之前的间隙</p><p>​ X,REC_NOT_GAP：只锁定记录本身</p><p>​ S，REC_NOT_GAP：只锁定记录本身</p><p>​ X，GAP：间隙锁，不锁定记录本身</p><p>​ S，GAP：间隙锁，不锁定记录本身</p><p>​ X，GAP,INSERT_INTENTION：插入意向锁</p><h1 id="13、mysql原子性和持久性是怎么保证的？"><a href="#13、mysql原子性和持久性是怎么保证的？" class="headerlink" title="13、mysql原子性和持久性是怎么保证的？"></a>13、mysql原子性和持久性是怎么保证的？</h1><p>​ 原子性通过undolog来实现，持久性通过redo log来实现</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、描述一下数据库事务隔离级别？&quot;&gt;&lt;a href=&quot;#1、描述一下数据库事务隔离级别？&quot; class=&quot;headerlink&quot; title=&quot;1、描述一下数据库事务隔离级别？&quot;&gt;&lt;/a&gt;1、描述一下数据库事务隔离级别？&lt;/h1&gt;&lt;h2 id=&quot;ACID：&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="ACID" scheme="http://example.com/categories/ACID/"/>
    
    <category term="MVCC" scheme="http://example.com/categories/ACID/MVCC/"/>
    
    
    <category term="数据库" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="事务隔离级别" scheme="http://example.com/tags/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    
    <category term="幻读" scheme="http://example.com/tags/%E5%B9%BB%E8%AF%BB/"/>
    
    <category term="索引失效" scheme="http://example.com/tags/%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88/"/>
    
    <category term="分库分表" scheme="http://example.com/tags/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/"/>
    
    <category term="存储引擎" scheme="http://example.com/tags/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>mysql的加锁情况</title>
    <link href="http://example.com/2024/05/28/mysql%E7%9A%84%E5%8A%A0%E9%94%81%E6%83%85%E5%86%B5/"/>
    <id>http://example.com/2024/05/28/mysql%E7%9A%84%E5%8A%A0%E9%94%81%E6%83%85%E5%86%B5/</id>
    <published>2024-05-28T08:46:54.000Z</published>
    <updated>2024-05-29T02:05:17.001Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql的加锁情况"><a href="#mysql的加锁情况" class="headerlink" title="mysql的加锁情况"></a>mysql的加锁情况</h1><h2 id="1、REPEATABLE-READ隔离级别-表无显式主键和索引"><a href="#1、REPEATABLE-READ隔离级别-表无显式主键和索引" class="headerlink" title="1、REPEATABLE-READ隔离级别+表无显式主键和索引"></a>1、REPEATABLE-READ隔离级别+表无显式主键和索引</h2><p>创建表t,没有索引和主键，并插入测试数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t(id <span class="type">int</span> <span class="keyword">default</span> <span class="keyword">null</span>,name <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">values</span>(<span class="number">10</span>,<span class="string">&#x27;10&#x27;</span>),(<span class="number">20</span>,<span class="string">&#x27;20&#x27;</span>),(<span class="number">30</span>,<span class="string">&#x27;30&#x27;</span>);</span><br></pre></td></tr></table></figure><p>手动开启事务，执行语句并采用for update方式（当前读）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>从返回的信息中，可以看到对表添加了IX锁和4个记录锁，表中的三行记录上分别添加了Next-key<br>Lock锁，防止有数据变化发生幻读，例如进行了更新、删除操作。同时会出现“ 0: len 8; hex 73757072656d756d; asc<br>supremum;;”这样的描述信息，此操作也是为了防止幻读，会将最大索引值之后的间隙锁住并用supremum表示高于表中任何一个索引的值。</p><p>同表下，如果加上where条件之后，是否会产生Next-key Lock呢？执行如下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>从上述反馈信息中，可以发现跟不加where条件的加锁情况是一样的，会同时出现多个行的临键锁和supremum，这到底是为什么呢？</p><p>出现supremum的原因是：虽然where的条件是10，但是每次插入记录时所需要生成的聚簇索引Row_id还是自增的，每次都会在表的最后插入，所以就有可能插入id&#x3D;10这条记录，因此要添加一个supremum防止数据插入。</p><p>出现其他行的临键锁的原因是：为了防止幻读，如果不添加Next-Key Lock锁，这时若有其他会话执行DELETE或者UPDATE语句，则都会造成幻读。</p><h2 id="2、REPEATABLE-READ隔离级别-表有显式主键无索引"><a href="#2、REPEATABLE-READ隔离级别-表有显式主键无索引" class="headerlink" title="2、REPEATABLE-READ隔离级别+表有显式主键无索引"></a>2、REPEATABLE-READ隔离级别+表有显式主键无索引</h2><p>创建如下表并添加数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t2(id <span class="type">int</span> <span class="keyword">primary</span> key <span class="keyword">not</span> <span class="keyword">null</span>,name <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2 <span class="keyword">values</span>(<span class="number">10</span>,<span class="string">&#x27;10&#x27;</span>),(<span class="number">20</span>,<span class="string">&#x27;20&#x27;</span>),(<span class="number">30</span>,<span class="string">&#x27;30&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在此情况下要分为三种情况来进行分析，不同情况的加锁方式也不同：</p><p>1、不带where条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t2 <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>通过上述信息可以看到，与之前的加锁方式是相同的。</p><p>2、where条件是主键字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t2 <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>通过上述信息可以看到，只会对表中添加IX锁和对主键添加了记录锁（X locks rec but not<br>gap）,并且只锁住了where条件id&#x3D;10这条记录，因为主键已经保证了唯一性，所以在插入时就不会是id&#x3D;10这条记录。</p><p>3、where条件包含主键字段和非关键字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t2 <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10</span> <span class="keyword">and</span> name <span class="operator">=</span> <span class="string">&#x27;10&#x27;</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>通过看到，加锁方式与where条件是主键字段的加锁方式相同，因为根据主键字段可以直接定位一条记录。</p><h2 id="3、REPEATABLE-READ隔离级别-表无显式主键有索引"><a href="#3、REPEATABLE-READ隔离级别-表无显式主键有索引" class="headerlink" title="3、REPEATABLE-READ隔离级别+表无显式主键有索引"></a>3、REPEATABLE-READ隔离级别+表无显式主键有索引</h2><p>1、不带where条件，跟之前的情况类似</p><p>2、where条件是普通索引字段或者（普通索引字段+非索引字段）</p><p>创建如下表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t3(id <span class="type">int</span> <span class="keyword">default</span> <span class="keyword">null</span>,name <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">create</span> index idx_id <span class="keyword">on</span> t3(id);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t3 <span class="keyword">values</span>(<span class="number">10</span>,<span class="string">&#x27;10&#x27;</span>),(<span class="number">20</span>,<span class="string">&#x27;20&#x27;</span>),(<span class="number">30</span>,<span class="string">&#x27;30&#x27;</span>);</span><br></pre></td></tr></table></figure><p>执行如下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t3 <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>通过上述信息可以看到，对表添加了IX锁，对id&#x3D;10的索引添加了Next-Key<br>Lock锁，区间是负无穷到10，对索引对应的聚集索引添加了X记录锁，为了防止幻读，对索引记录区间（10，20）添加间隙锁。</p><p>此时大家可以开启一个新的事务，插入负无穷到id&#x3D;19的全部记录都会被阻塞，而大于等于20 的值不会被阻塞</p><p>3、where条件是唯一索引字段或者（唯一索引字段+非索引字段）</p><p>创建如下表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t4(id <span class="type">int</span> <span class="keyword">default</span> <span class="keyword">null</span>,name <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index idx_id <span class="keyword">on</span> t4(id);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t4 <span class="keyword">values</span>(<span class="number">10</span>,<span class="string">&#x27;10&#x27;</span>),(<span class="number">20</span>,<span class="string">&#x27;20&#x27;</span>),(<span class="number">30</span>,<span class="string">&#x27;30&#x27;</span>);</span><br></pre></td></tr></table></figure><p>执行如下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t4 <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>通过上述信息可以看到，此方式与where条件是主键字段的加锁情况相同，表无显式主键则会把唯一索引作为主键，因为是主键，所以不能再插入id&#x3D;10这条记录，因此也不需要间隙锁。</p><h2 id="4、REPEATABLE-READ隔离级别-表有显式主键和索引"><a href="#4、REPEATABLE-READ隔离级别-表有显式主键和索引" class="headerlink" title="4、REPEATABLE-READ隔离级别+表有显式主键和索引"></a>4、REPEATABLE-READ隔离级别+表有显式主键和索引</h2><p>此情况可以分为以下几种：</p><p>1、表有显式主键和普通索引</p><p>创建如下表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t5(id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,name <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="keyword">null</span>,<span class="keyword">primary</span> key(id),key idx_name(name));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t5 <span class="keyword">values</span>(<span class="number">10</span>,<span class="string">&#x27;10&#x27;</span>),(<span class="number">20</span>,<span class="string">&#x27;20&#x27;</span>),(<span class="number">30</span>,<span class="string">&#x27;30&#x27;</span>);</span><br></pre></td></tr></table></figure><p>(1)不带where条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t5 <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>通过上述信息可以看到，首先对表添加IX锁，然后对supremum添加临键锁，对name索引列添加临键锁，对主键索引添加X记录锁</p><p>(2)where条件是普通索引字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t5 <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;10&#x27;</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>通过上述信息可以看到，首先对表添加IX锁，然后对name添加临键锁，对主键索引列添加X记录锁，为了防止幻读，对name的（10，20）添加间隙锁</p><p>(3)where条件是主键字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t5 <span class="keyword">where</span> id<span class="operator">=</span><span class="number">10</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>通过上述信息可以看到，对表添加了意向锁，对主键添加了记录锁。</p><p>(4)where条件同时包含普通索引字段和主键索引字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t5 <span class="keyword">where</span> id<span class="operator">=</span><span class="number">10</span> <span class="keyword">and</span> name<span class="operator">=</span><span class="string">&#x27;10&#x27;</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>此处大家需要注意，如果在执行过程中使用的是主键索引，那么跟使用主键字段是一致的，如果使用的是普通索引，那么跟普通字段是类似的，其实本质点就在于加锁的字段不同而已。</p><p>2、表有显式主键和唯一索引</p><p>创建如下表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t6(id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,name <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="keyword">null</span>,<span class="keyword">primary</span> key(id),<span class="keyword">unique</span> key idx_name(name));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t6 <span class="keyword">values</span>(<span class="number">10</span>,<span class="string">&#x27;10&#x27;</span>),(<span class="number">20</span>,<span class="string">&#x27;20&#x27;</span>),(<span class="number">30</span>,<span class="string">&#x27;30&#x27;</span>);</span><br></pre></td></tr></table></figure><p>(1)不带where条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t6 <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>通过上述信息可以看到，首先对表添加IX锁，然后对supremum添加临键锁，对name索引列添加临键锁，对主键索引添加X记录锁</p><p>(2)where条件是唯一索引字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t6 <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;10&#x27;</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>通过上述信息可以看到，首先对表添加IX锁，然后对name和主键添加行锁</p><p>(3)where条件是主键字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t6 <span class="keyword">where</span> id<span class="operator">=</span><span class="number">10</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>通过上述信息可以看到，首先对表添加IX锁，然后主键添加行锁</p><p>(4)where条件是唯一索引字段和主键字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t6 <span class="keyword">where</span> id<span class="operator">=</span><span class="number">10</span> <span class="keyword">and</span> name<span class="operator">=</span><span class="string">&#x27;10&#x27;</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>此处大家需要注意，如果在执行过程中使用的是主键索引，那么跟使用主键字段是一致的，如果使用的是唯一索引，那么跟唯一索引字段是一样的，其实本质点就在于加锁的字段不同而已。</p><h2 id="5、READ-COMMITTED隔离级别-表无显式主键和索引"><a href="#5、READ-COMMITTED隔离级别-表无显式主键和索引" class="headerlink" title="5、READ-COMMITTED隔离级别+表无显式主键和索引"></a>5、READ-COMMITTED隔离级别+表无显式主键和索引</h2><p>创建表t,没有索引和主键，并插入测试数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t7(id <span class="type">int</span> <span class="keyword">default</span> <span class="keyword">null</span>,name <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t7 <span class="keyword">values</span>(<span class="number">10</span>,<span class="string">&#x27;10&#x27;</span>),(<span class="number">20</span>,<span class="string">&#x27;20&#x27;</span>),(<span class="number">30</span>,<span class="string">&#x27;30&#x27;</span>);</span><br></pre></td></tr></table></figure><p>手动开启事务，执行语句并采用for update方式（当前读）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t7 <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>通过上述信息可以看到，首先对表添加IX锁，然后对表的三行记录添加记录锁（聚簇索引）</p><p>同表下，如果加上where条件之后，是否会产生Next-key Lock呢？执行如下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t7 <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>通过上述信息可以看到，首先对表添加IX锁，然后会对聚集索引添加记录锁，因为RC隔离级别无法解决幻读问题，所以不会添加临键锁。</p><h2 id="6、READ-COMMITTED隔离级别-表有显式主键无索引"><a href="#6、READ-COMMITTED隔离级别-表有显式主键无索引" class="headerlink" title="6、READ-COMMITTED隔离级别+表有显式主键无索引"></a>6、READ-COMMITTED隔离级别+表有显式主键无索引</h2><p>创建如下表并添加数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t8(id <span class="type">int</span> <span class="keyword">primary</span> key <span class="keyword">not</span> <span class="keyword">null</span>,name <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t8 <span class="keyword">values</span>(<span class="number">10</span>,<span class="string">&#x27;10&#x27;</span>),(<span class="number">20</span>,<span class="string">&#x27;20&#x27;</span>),(<span class="number">30</span>,<span class="string">&#x27;30&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在此情况下要分为三种情况来进行分析，不同情况的加锁方式也不同：</p><p>1、不带where条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t8 <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>通过上述信息可以看到，首先对表添加IX锁，然后对表的三行记录添加记录锁（主键）</p><p>2、where条件是主键字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t8 <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>通过上述信息可以看到，首先对表添加IX锁，然后对表id&#x3D;10的积累添加记录锁</p><p>3、where条件包含主键字段和非关键字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t8 <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10</span> <span class="keyword">and</span> name <span class="operator">=</span> <span class="string">&#x27;10&#x27;</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>通过上述信息可以看到，首先对表添加IX锁，然后对表id&#x3D;10的积累添加记录锁</p><h2 id="7、READ-COMMITTED隔离级别-表无显式主键有索引"><a href="#7、READ-COMMITTED隔离级别-表无显式主键有索引" class="headerlink" title="7、READ-COMMITTED隔离级别+表无显式主键有索引"></a>7、READ-COMMITTED隔离级别+表无显式主键有索引</h2><p>创建如下表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t9(id <span class="type">int</span> <span class="keyword">default</span> <span class="keyword">null</span>,name <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">create</span> index idx_id <span class="keyword">on</span> t9(id);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t9 <span class="keyword">values</span>(<span class="number">10</span>,<span class="string">&#x27;10&#x27;</span>),(<span class="number">20</span>,<span class="string">&#x27;20&#x27;</span>),(<span class="number">30</span>,<span class="string">&#x27;30&#x27;</span>);</span><br></pre></td></tr></table></figure><p>1、不带where条件，跟之前的情况类似</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t9 <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>通过上述信息可以看到，首先对表添加IX锁，然后对表的三行记录添加记录锁（聚簇索引）</p><p>2、where条件是普通索引字段或者（普通索引字段+非索引字段）</p><p>执行如下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t9 <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>通过上述信息可以看到，对表添加了IX锁，对id&#x3D;10的索引添加了行锁，对索引对应的聚集索引添加了行锁，</p><p>3、where条件是唯一索引字段或者（唯一索引字段+非索引字段）</p><p>创建如下表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t10(id <span class="type">int</span> <span class="keyword">default</span> <span class="keyword">null</span>,name <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index idx_id <span class="keyword">on</span> t10(id);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t10 <span class="keyword">values</span>(<span class="number">10</span>,<span class="string">&#x27;10&#x27;</span>),(<span class="number">20</span>,<span class="string">&#x27;20&#x27;</span>),(<span class="number">30</span>,<span class="string">&#x27;30&#x27;</span>);</span><br></pre></td></tr></table></figure><p>执行如下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t10 <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>通过上述信息可以看到，对表添加了IX锁，对id&#x3D;10的索引添加了行锁，对索引对应的聚集索引添加了行锁。</p><h2 id="8、READ-COMMITTED隔离级别-表有显式主键和索引"><a href="#8、READ-COMMITTED隔离级别-表有显式主键和索引" class="headerlink" title="8、READ-COMMITTED隔离级别+表有显式主键和索引"></a>8、READ-COMMITTED隔离级别+表有显式主键和索引</h2><p>此情况可以分为以下几种：</p><p>1、表有显式主键和普通索引</p><p>创建如下表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t11(id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,name <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="keyword">null</span>,<span class="keyword">primary</span> key(id),key idx_name(name));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t11 <span class="keyword">values</span>(<span class="number">10</span>,<span class="string">&#x27;10&#x27;</span>),(<span class="number">20</span>,<span class="string">&#x27;20&#x27;</span>),(<span class="number">30</span>,<span class="string">&#x27;30&#x27;</span>);</span><br></pre></td></tr></table></figure><p>(1)不带where条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t11 <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>通过上述信息可以看到，首先对表添加IX锁，然后对name索引列添加记录锁，对主键索引添加X记录锁</p><p>(2)where条件是普通索引字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t11 <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;10&#x27;</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>通过上述信息可以看到，首先对表添加IX锁，然后对name添加X记录锁，对主键索引列添加X记录锁</p><p>(3)where条件是主键字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t11 <span class="keyword">where</span> id<span class="operator">=</span><span class="number">10</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>通过上述信息可以看到，对表添加了意向锁，对主键添加了记录锁。</p><p>(4)where条件同时包含普通索引字段和主键索引字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t11 <span class="keyword">where</span> id<span class="operator">=</span><span class="number">10</span> <span class="keyword">and</span> name<span class="operator">=</span><span class="string">&#x27;10&#x27;</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>此处大家需要注意，如果在执行过程中使用的是主键索引，那么跟使用主键字段是一致的，如果使用的是普通索引，那么跟普通字段是类似的，其实本质点就在于加锁的字段不同而已。</p><p>2、表有显式主键和唯一索引</p><p>创建如下表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t12(id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,name <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="keyword">null</span>,<span class="keyword">primary</span> key(id),<span class="keyword">unique</span> key idx_name(name));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t12 <span class="keyword">values</span>(<span class="number">10</span>,<span class="string">&#x27;10&#x27;</span>),(<span class="number">20</span>,<span class="string">&#x27;20&#x27;</span>),(<span class="number">30</span>,<span class="string">&#x27;30&#x27;</span>);</span><br></pre></td></tr></table></figure><p>(1)不带where条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t12 <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>通过上述信息可以看到，首先对表添加IX锁，然后对name索引列添加X记录锁，对主键索引添加X记录锁</p><p>(2)where条件是唯一索引字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t12 <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;10&#x27;</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>通过上述信息可以看到，首先对表添加IX锁，然后对name和主键添加行锁</p><p>(3)where条件是主键字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t12 <span class="keyword">where</span> id<span class="operator">=</span><span class="number">10</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>通过上述信息可以看到，首先对表添加IX锁，然后主键添加行锁</p><p>(4)where条件是唯一索引字段和主键字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t6 <span class="keyword">where</span> id<span class="operator">=</span><span class="number">10</span> <span class="keyword">and</span> name<span class="operator">=</span><span class="string">&#x27;10&#x27;</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">show</span> engine innodb status\G</span><br></pre></td></tr></table></figure><p>注意，如果在执行过程中使用的是主键索引，那么跟使用主键字段是一致的，如果使用的是唯一索引，那么跟唯一索引字段是一样的，其实本质点就在于加锁的字段不同而已。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mysql的加锁情况&quot;&gt;&lt;a href=&quot;#mysql的加锁情况&quot; class=&quot;headerlink&quot; title=&quot;mysql的加锁情况&quot;&gt;&lt;/a&gt;mysql的加锁情况&lt;/h1&gt;&lt;h2 id=&quot;1、REPEATABLE-READ隔离级别-表无显式主键和索引&quot;&gt;</summary>
      
    
    
    
    <category term="lock" scheme="http://example.com/categories/lock/"/>
    
    
    <category term="数据库" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="锁" scheme="http://example.com/tags/%E9%94%81/"/>
    
    <category term="隔离级别" scheme="http://example.com/tags/%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>MVCC多版本并发控制</title>
    <link href="http://example.com/2024/05/27/MVCC%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/"/>
    <id>http://example.com/2024/05/27/MVCC%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</id>
    <published>2024-05-27T08:46:54.000Z</published>
    <updated>2024-05-27T13:51:59.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MVCC多版本并发控制"><a href="#MVCC多版本并发控制" class="headerlink" title="MVCC多版本并发控制"></a>MVCC多版本并发控制</h1><h3 id="1、MVCC"><a href="#1、MVCC" class="headerlink" title="1、MVCC"></a>1、MVCC</h3><p>​ MVCC，全称Multi-Version Concurrency Control，即多版本并发控制。MVCC是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中实现事务内存。</p><pre><code>     MVCC在MySQL InnoDB中的实现主要是为了提高数据库并发性能，用更好的方式去处理读写冲突，做到即使有读写冲突时，也能做到不加锁，非阻塞并发读。</code></pre><h3 id="2、当前读"><a href="#2、当前读" class="headerlink" title="2、当前读"></a>2、当前读</h3><p>​ 像select lock in share mode(共享锁), select for update ; update, insert ,delete(排他锁)<br>这些操作都是一种当前读，为什么叫当前读？就是它读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。</p><h3 id="3、快照读（提高数据库的并发查询能力）"><a href="#3、快照读（提高数据库的并发查询能力）" class="headerlink" title="3、快照读（提高数据库的并发查询能力）"></a>3、快照读（提高数据库的并发查询能力）</h3><p>​<br>像不加锁的select操作就是快照读，即不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读；之所以出现快照读的情况，是基于提高并发性能的考虑，快照读的实现是基于多版本并发控制，即MVCC,可以认为MVCC是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；既然是基于多版本，即快照读可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本</p><h3 id="4、当前读、快照读、MVCC关系"><a href="#4、当前读、快照读、MVCC关系" class="headerlink" title="4、当前读、快照读、MVCC关系"></a>4、当前读、快照读、MVCC关系</h3><p>​ MVCC多版本并发控制指的是维持一个数据的多个版本，使得读写操作没有冲突，快照读是MySQL为实现MVCC的一个非阻塞读功能。MVCC模块在MySQL中的具体实现是由三个隐式字段，undo日志、read<br>view三个组件来实现的。</p><h3 id="5、MVCC解决的问题"><a href="#5、MVCC解决的问题" class="headerlink" title="5、MVCC解决的问题"></a>5、MVCC解决的问题</h3><p>​ 数据库并发场景有三种，分别为：</p><p>​ 1、读读：不存在任何问题，也不需要并发控制</p><p>​ 2、读写：有线程安全问题，可能会造成事务隔离性问题，可能遇到脏读、幻读、不可重复读</p><p>​ 3、写写：有线程安全问题，可能存在更新丢失问题</p><p>​ MVCC是一种用来解决读写冲突的无锁并发控制，也就是为事务分配单项增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务开始前的数据库的快照，所以MVCC可以为数据库解决一下问题：</p><p>​ 1、在并发读写数据库时，可以做到在读操作时不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发读写的性能</p><p>​ 2、解决脏读、幻读、不可重复读等事务隔离问题，但是不能解决更新丢失问题</p><h3 id="6、MVCC实现原理"><a href="#6、MVCC实现原理" class="headerlink" title="6、MVCC实现原理"></a>6、MVCC实现原理</h3><p>​ mvcc的实现原理主要依赖于记录中的三个隐藏字段，undolog，read view来实现的。</p><p>​        <strong>隐藏字段</strong></p><p>​ 每行记录除了我们自定义的字段外，还有数据库隐式定义的DB_TRX_ID,DB_ROLL_PTR,DB_ROW_ID等字段</p><p>​ DB_TRX_ID</p><p>​ 6字节，最近修改事务id，记录创建这条记录或者最后一次修改该记录的事务id</p><p>​ DB_ROLL_PTR</p><p>​ 7字节，回滚指针，指向这条记录的上一个版本,用于配合undolog，指向上一个旧版本</p><p>​ DB_ROW_JD</p><p>​ 6字节，隐藏的主键，如果数据表没有主键，那么innodb会自动生成一个6字节的row_id</p><p>​ 记录如图所示：</p><p><img src="/img/MVCC%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/%E6%95%B0%E6%8D%AE%E6%A1%88%E4%BE%8B.png" alt="1.png"><br>​ 在上图中，DB_ROW_ID是数据库默认为该行记录生成的唯一隐式主键，DB_TRX_ID是当前操作该记录的事务ID，DB_ROLL_PTR是一个回滚指针，用于配合undo日志，指向上一个旧版本</p><p>​        <strong>undo log</strong></p><p>​ undolog被称之为回滚日志，表示在进行insert，delete，update操作的时候产生的方便回滚的日志</p><p>​ 当进行insert操作的时候，产生的undolog只在事务回滚的时候需要，并且在事务提交之后可以被立刻丢弃</p><p>​<br>当进行update和delete操作的时候，产生的undolog不仅仅在事务回滚的时候需要，在快照读的时候也需要，所以不能随便删除，只有在快照读或事务回滚不涉及该日志时，对应的日志才会被purge线程统一清除（当数据发生更新和删除操作的时候都只是设置一下老记录的deleted_bit，并不是真正的将过时的记录删除，因为为了节省磁盘空间，innodb有专门的purge线程来清除deleted_bit为true的记录，如果某个记录的deleted_id为true，并且DB_TRX_ID相对于purge线程的read<br>view 可见，那么这条记录一定时可以被清除的）</p><p>​        <strong>下面我们来看一下undolog生成的记录链</strong></p><p>​ 1、假设有一个事务编号为1的事务向表中插入一条记录，那么此时行数据的状态为：</p><p><img src="/img/MVCC%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/1.png" alt="image-20210225235444975"></p><p>​ 2、假设有第二个事务编号为2对该记录的name做出修改，改为lisi</p><p>​ 在事务2修改该行记录数据时，数据库会对该行加排他锁</p><p>​ 然后把该行数据拷贝到undolog中，作为 旧记录，即在undolog中有当前行的拷贝副本</p><p>​ 拷贝完毕后，修改该行name为lisi，并且修改隐藏字段的事务id为当前事务2的id，回滚指针指向拷贝到undolog的副本记录中</p><p>​ 事务提交后，释放锁</p><p><img src="/img/MVCC%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/2.png" alt="image-20210313220450629"></p><p>​ 3、假设有第三个事务编号为3对该记录的age做了修改，改为32</p><p>​ 在事务3修改该行数据的时，数据库会对该行加排他锁</p><p>​ 然后把该行数据拷贝到undolog中，作为旧纪录，发现该行记录已经有undolog了，那么最新的旧数据作为链表的表头，插在该行记录的undolog最前面</p><p>​ 修改该行age为32岁，并且修改隐藏字段的事务id为当前事务3的id，回滚指针指向刚刚拷贝的undolog的副本记录</p><p>​ 事务提交，释放锁</p><p><img src="/img/MVCC%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/3.png" alt="image-20210313220337624"></p><p>​ 从上述的一系列图中，大家可以发现，不同事务或者相同事务的对同一记录的修改，会导致该记录的undolog生成一条记录版本线性表，即链表，undolog的链首就是最新的旧记录，链尾就是最早的旧记录。</p><p>​        <strong>Read View</strong></p><p>​ 上面的流程如果看明白了，那么大家需要再深入理解下read view的概念了。</p><p>​ Read View是事务进行快照读操作的时候生产的读视图，在该事务执行快照读的那一刻，会生成一个数据系统当前的快照，记录并维护系统当前活跃事务的id，事务的id值是递增的。</p><p>​ 其实Read View的最大作用是用来做可见性判断的，也就是说当某个事务在执行快照读的时候，对该记录创建一个Read<br>View的视图，把它当作条件去判断当前事务能够看到哪个版本的数据，有可能读取到的是最新的数据，也有可能读取的是当前行记录的undolog中某个版本的数据</p><p>​ Read View遵循的可见性算法主要是将要被修改的数据的最新记录中的DB_TRX_ID（当前事务id）取出来，与系统当前其他活跃事务的id去对比，如果DB_TRX_ID跟Read<br>View的属性做了比较，不符合可见性，那么就通过DB_ROLL_PTR回滚指针去取出undolog中的DB_TRX_ID做比较，即遍历链表中的DB_TRX_ID，直到找到满足条件的DB_TRX_ID,这个DB_TRX_ID所在的旧记录就是当前事务能看到的最新老版本数据。</p><p>​ Read View的可见性规则如下所示：</p><p>​ 首先要知道Read View中的三个全局属性：</p><p>​ trx_list:一个数值列表，用来维护Read View生成时刻系统正活跃的事务ID（1,2,3）</p><p>​ up_limit_id:记录trx_list列表中事务ID最小的ID（1）</p><p>​ low_limit_id:Read View生成时刻系统尚未分配的下一个事务ID，（4）</p><p>​ 具体的比较规则如下：</p><p>​ 1、首先比较DB_TRX_ID &lt; up_limit_id,如果小于，则当前事务能看到DB_TRX_ID所在的记录，如果大于等于进入下一个判断</p><p>​ 2、接下来判断DB_TRX_ID &gt;&#x3D; low_limit_id,如果大于等于则代表DB_TRX_ID所在的记录在Read<br>View生成后才出现的，那么对于当前事务肯定不可见，如果小于，则进入下一步判断</p><p>​ 3、判断DB_TRX_ID是否在活跃事务中，如果在，则代表在Read View生成时刻，这个事务还是活跃状态，还没有commit，修改的数据，当前事务也是看不到，如果不在，则说明这个事务在Read<br>View生成之前就已经开始commit，那么修改的结果是能够看见的。</p><h3 id="7、MVCC的整体处理流程"><a href="#7、MVCC的整体处理流程" class="headerlink" title="7、MVCC的整体处理流程"></a>7、MVCC的整体处理流程</h3><p>假设有四个事务同时在执行，如下图所示：</p><table><thead><tr><th align="center">事务1</th><th align="center">事务2</th><th align="center">事务3</th><th align="center">事务4</th></tr></thead><tbody><tr><td align="center">事务开始</td><td align="center">事务开始</td><td align="center">事务开始</td><td align="center">事务开始</td></tr><tr><td align="center">……</td><td align="center">……</td><td align="center">……</td><td align="center">修改且已提交</td></tr><tr><td align="center">进行中</td><td align="center">快照读</td><td align="center">进行中</td><td align="center"></td></tr><tr><td align="center">……</td><td align="center">……</td><td align="center">……</td><td align="center"></td></tr></tbody></table><p>从上述表格中，我们可以看到，当事务2对某行数据执行了快照读，数据库为该行数据生成一个Read<br>View视图，可以看到事务1和事务3还在活跃状态，事务4在事务2快照读的前一刻提交了更新，所以，在Read<br>View中记录了系统当前活跃事务1，3，维护在一个列表中。同时可以看到up_limit_id的值为1，而low_limit_id为5，如下图所示：</p><p><img src="/img/MVCC%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/4.png" alt="image-20210227183316573"></p><p>在上述的例子中，只有事务4修改过该行记录，并在事务2进行快照读前，就提交了事务，所以该行当前数据的undolog如下所示：</p><p><img src="/img/MVCC%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/5.png" alt="image-20210227183849998"></p><p>​ 当事务2在快照读该行记录的是，会拿着该行记录的DB_TRX_ID去跟up_limit_id,lower_limit_id和活跃事务列表进行比较，判读事务2能看到该行记录的版本是哪个。</p><p>​ 具体流程如下：先拿该行记录的事务ID（4）去跟Read<br>View中的up_limit_id相比较，判断是否小于，通过对比发现不小于，所以不符合条件，继续判断4是否大于等于low_limit_id,通过比较发现也不大于，所以不符合条件，判断事务4是否处理trx_list列表中，发现不再次列表中，那么符合可见性条件，所以事务4修改后提交的最新结果对事务2<br>的快照是可见的，因此，事务2读取到的最新数据记录是事务4所提交的版本，而事务4提交的版本也是全局角度的最新版本。如下图所示：</p><p><img src="/img/MVCC%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/6.png" alt="image-20210227185820394"></p><p>当上述的内容都看明白了的话，那么大家就应该能够搞清楚这几个核心概念之间的关系了，下面我们讲一个不同的隔离级别下的快照读的不同。</p><h3 id="8、RC、RR级别下的InnoDB快照读有什么不同"><a href="#8、RC、RR级别下的InnoDB快照读有什么不同" class="headerlink" title="8、RC、RR级别下的InnoDB快照读有什么不同"></a>8、RC、RR级别下的InnoDB快照读有什么不同</h3><p>​ 因为Read View生成时机的不同，从而造成RC、RR级别下快照读的结果的不同</p><p>​ 1、在RR级别下的某个事务的对某条记录的第一次快照读会创建一个快照即Read View,将当前系统活跃的其他事务记录起来，此后在调用快照读的时候，还是使用的是同一个Read<br>View,所以只要当前事务在其他事务提交更新之前使用过快照读，那么之后的快照读使用的都是同一个Read View,所以对之后的修改不可见</p><p>​ 2、在RR级别下，快照读生成Read View时，Read View会记录此时所有其他活动和事务的快照，这些事务的修改对于当前事务都是不可见的，而早于Read<br>View创建的事务所做的修改均是可见</p><p>​ 3、在RC级别下，事务中，每次快照读都会新生成一个快照和Read View,这就是我们在RC级别下的事务中可以看到别的事务提交的更新的原因。</p><p>​        <strong>总结：在RC隔离级别下，是每个快照读都会生成并获取最新的Read View,而在RR隔离级别下，则是同一个事务中的第一个快照读才会创建Read<br>View，之后的快照读获取的都是同一个Read View.</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MVCC多版本并发控制&quot;&gt;&lt;a href=&quot;#MVCC多版本并发控制&quot; class=&quot;headerlink&quot; title=&quot;MVCC多版本并发控制&quot;&gt;&lt;/a&gt;MVCC多版本并发控制&lt;/h1&gt;&lt;h3 id=&quot;1、MVCC&quot;&gt;&lt;a href=&quot;#1、MVCC&quot; cla</summary>
      
    
    
    
    <category term="MVCC" scheme="http://example.com/categories/MVCC/"/>
    
    
    <category term="并发" scheme="http://example.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
    <category term="数据库" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="事务" scheme="http://example.com/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
</feed>
